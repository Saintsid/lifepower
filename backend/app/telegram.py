import httpx
import os
from typing import Optional

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

async def send_telegram_notification(message: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("‚ö†Ô∏è Telegram credentials not configured")
        return False
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=payload, timeout=10.0)
            if response.status_code == 200:
                print("‚úÖ Telegram notification sent")
                return True
            else:
                print(f"‚ùå Telegram API error: {response.status_code}")
                return False
    except Exception as e:
        print(f"‚ùå Failed to send Telegram notification: {e}")
        return False


async def notify_new_booking(booking_data: dict, user_name: Optional[str] = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    """
    user_type = "üîê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if user_name else "üë§ –ê–Ω–æ–Ω–∏–º–Ω–∞—è –∑–∞—è–≤–∫–∞"
    
    message = f"""
üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!</b>

{user_type}

<b>–ò–º—è:</b> {booking_data.get('name', '-')}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {booking_data.get('phone', '-')}
<b>Email:</b> {booking_data.get('email', '-')}
<b>–£—Å–ª—É–≥–∞:</b> {booking_data.get('service', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {booking_data.get('message', '-')}

üìä –°—Ç–∞—Ç—É—Å: –ù–æ–≤–∞—è
üïê –í—Ä–µ–º—è: {booking_data.get('created_at', '-')}
"""
    
    await send_telegram_notification(message.strip())
